{"version":3,"file":"static/js/816.88070c17.chunk.js","mappings":"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","sources":["styles/img/auth/google.svg","components/FreeTrial/FreeTrial.styled.jsx","components/Integration/Integration.styled.jsx","pages/Authorization/Login.styled.jsx","pages/Authorization/SignUp.jsx","pages/Authorization/SignUp.styled.jsx"],"sourcesContent":["var _g, _defs;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGoogle(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 24,\n    viewBox: \"0 0 25 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_7833_55815)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.266 12.2765C24.266 11.4608 24.1999 10.6406 24.0588 9.83813H12.74V14.4591H19.2217C18.9528 15.9495 18.0885 17.2679 16.823 18.1056V21.104H20.69C22.9608 19.014 24.266 15.9274 24.266 12.2765Z\",\n    fill: \"#4285F4\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.74 24.0008C15.9764 24.0008 18.7058 22.9382 20.6944 21.1039L16.8274 18.1055C15.7516 18.8375 14.3626 19.252 12.7444 19.252C9.61376 19.252 6.95934 17.1399 6.00693 14.3003H2.01648V17.3912C4.05359 21.4434 8.20278 24.0008 12.74 24.0008Z\",\n    fill: \"#34A853\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.00253 14.3002C5.49987 12.8099 5.49987 11.196 6.00253 9.70569V6.61475H2.01649C0.31449 10.0055 0.31449 14.0004 2.01649 17.3912L6.00253 14.3002Z\",\n    fill: \"#FBBC04\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.74 4.74966C14.4508 4.7232 16.1043 5.36697 17.3433 6.54867L20.7694 3.12262C18.6 1.0855 15.7207 -0.034466 12.74 0.000808666C8.20277 0.000808666 4.05359 2.55822 2.01648 6.61481L6.00252 9.70575C6.95052 6.86173 9.60935 4.74966 12.74 4.74966Z\",\n    fill: \"#EA4335\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_7833_55815\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 24,\n    height: 24,\n    fill: \"white\",\n    transform: \"translate(0.5)\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGoogle);\nexport default __webpack_public_path__ + \"static/media/google.0c0061d3f1604755becb270b652f3e86.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\nimport { BtnPrimary, BtnTerGrey } from '../../styles/UI/ButtonCTA';\n\nexport const TrialWrapper = styled.div`\n        margin: 6rem auto 0 auto;\n`;\n\nexport const TrialFrame = styled.div`\n        padding: 2.5rem 1.5rem;\n        display: flex;\n        flex-flow: column nowrap;\n        justify-content: center;\n        align-items: center;\n        gap: 2rem;\n        min-height: 212px;\n        min-width: 343px;\n        width: 100%;\n        height: 100%;\n        background-color: ${({ theme }) => theme.blockElement};\n        border-radius: var(--radii-1);\n\n        @media (min-width: 768px) {\n                padding: 4rem;\n                flex-flow: row nowrap;\n                justify-content: space-between;\n                align-items: flex-start;\n                max-width: 1216px;\n                max-height: 343px;\n        }\n`;\n\nexport const TextFrame = styled.section`\n        flex-flow: column nowrap;\n        justify-content: center;\n        align-items: flex-start;\n`;\n\nexport const ButtonsFrame = styled.div`\n        display: flex;\n        gap: 0.5rem;\n        flex-flow: column nowrap;\n        justify-content: center;\n        align-items: center;\n        @media (min-width: 768px) {\n                gap: 0.8rem;\n                flex-flow: row nowrap;\n                justify-content: center;\n                align-items: center;\n        }\n`;\n\nexport const BtnActive = styled(BtnPrimary)`\n        min-width: 295px;\n        width: 100%;\n\n        @media (min-width: 768px) {\n                min-width: 128px;\n                width: 100%;\n        }\n`;\n\nexport const BtnMore = styled(BtnTerGrey)`\n        color: ${({ theme }) => theme.btn.secondary};\n        min-width: 295px;\n        width: 100%;\n        border: 1px solid var(--gray-300);\n        background-color: var(--white);\n\n        &:focus {\n                color: var(--gray-700);\n        }\n\n        &:hover {\n                border: 1px solid var(--gray-300);\n                background-color: var(--gray-50);\n                color: var(--gray-800);\n        }\n\n        @media (min-width: 768px) {\n                min-width: 128px;\n                width: 100%;\n        }\n`;\n","import styled from 'styled-components';\nimport { BtnPrimary } from '../../styles/UI/ButtonCTA';\n\nexport const Wrapper = styled.section`\n        margin: 3rem auto;\n\n        display: flex;\n        justify-content: center;\n        align-items: center;\n`;\n\nexport const IconList = styled.div`\n        margin-bottom: 4rem;\n        padding: 0 11rem;\n        display: flex;\n        flex-flow: row wrap;\n        align-items: center;\n        justify-content: center;\n        max-width: 1216px;\n`;\n\nexport const BtnMain = styled(BtnPrimary)`\n        min-width: 192px;\n        width: 100%;\n`;\n\nexport const BtnWrapper = styled(Wrapper)`\n        margin: 0 auto;\n`;\n","import styled from 'styled-components';\nimport { BtnMore } from '../../components/FreeTrial/FreeTrial.styled';\nimport { BtnMain } from '../../components/Integration/Integration.styled';\n\nexport const Wrapper = styled.section`\n        margin: 5rem auto;\n        height: 100vh;\n`;\n\nexport const LoginBlock = styled.div`\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-flow: column nowrap;\n`;\n\nexport const LoginText = styled.div`\n        text-align: center;\n`;\n\nexport const LoginForm = styled.form`\n        max-height: 500px;\n        display: flex;\n        flex-flow: column wrap;\n        justify-content: center;\n        align-items: center;\n\n        label {\n                color: ${({ theme }) => theme.fontColorBase};\n                display: block;\n                font-size: var(--text-sm);\n                line-height: var(--text-lh-sm);\n                font-family: var(--ff);\n                font-weight: var(--fw-medium);\n        }\n\n        input {\n                color: var(--gray-500);\n                font-size: var(--text-md);\n                line-height: var(--text-lh-md);\n                font-family: var(--ff);\n                font-weight: var(--fw-normal);\n                margin-top: 0.375rem;\n                margin-bottom: 1.5rem;\n                min-width: 343px;\n                min-height: 44px;\n                display: block;\n                height: 100%;\n                padding: 0.6rem 0.8rem;\n                border: 1px var(--gray-300) solid;\n                border-radius: var(--radii);\n                box-shadow: var(--shadow-xs);\n        }\n\n        input::placeholder {\n                color: var(--gray-500);\n                font-size: var(--text-md);\n                line-height: var(--text-lh-md);\n                font-family: var(--ff);\n                font-weight: var(--fw-normal);\n        }\n\n        div {\n                display: flex;\n                flex-flow: row wrap;\n                align-items: center;\n                justify-content: space-between;\n                gap: 0.5rem;\n        }\n`;\n\nexport const LoginBtn = styled(BtnMain)`\n        margin: 0 auto;\n        margin-top: 1.5rem;\n        min-width: 343px;\n        max-width: 400px;\n        width: 100%;\n`;\nexport const LoginIcon = styled(BtnMore)`\n        margin: 0 auto;\n        margin-top: 1.5rem;\n        min-width: 343px;\n        max-width: 400px;\n        width: 100%;\n        margin-top: 1rem;\n        vertical-align: middle;\n        min-width: 343px;\n        img {\n                vertical-align: middle;\n                padding-right: 0.5rem;\n        }\n`;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { useEffect, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FiEyeOff, FiEye } from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { Container } from '../../styles/Container';\nimport { TextErrorSm, TextNormalSm, LinkSmMd, HeadingSmSbBase, SubHeadTextMdNorm } from '../../styles/UI/Text';\nimport { LoginText, LoginBtn, LoginIcon } from './Login.styled';\nimport googleIcon from '../../styles/img/auth/google.svg';\nimport { SignUpForm, SignUpBlock, InputBlock, ErrorBlock, Wrapper, TextSeparator } from './SignUp.styled';\nimport { useToggle } from '../../hooks/useToggle';\nimport { useAuth } from '../../context/AuthContext';\nimport { SpinnerXl } from '../../styles/UI/Spinners';\nimport { pageTransitionSingle } from '../../animation/page';\n\nconst SignUp = () => {\n        const [isVisible, setIsVisible] = useToggle();\n        const [isVisible2, setIsVisible2] = useToggle();\n        const { singup, error, isLoading, singUpWithGoogle, currentUser } = useAuth();\n        const navigate = useNavigate();\n        const inputPassword = useRef();\n\n        const {\n                register,\n                formState: { errors },\n                handleSubmit,\n                watch,\n                reset,\n        } = useForm({ mode: 'onBlur' });\n\n        inputPassword.current = watch('password', '');\n\n        const onSubmit = async (data) => {\n                const { email, password } = data;\n\n                // sign up with email and password\n                if (email && password) {\n                        await singup(email, password);\n                }\n                reset();\n                navigate('/dashboard');\n        };\n\n        useEffect(() => {\n                if (currentUser) {\n                        navigate('/dashboard');\n                }\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [currentUser]);\n\n        const signUpWithGoogle = async () => {\n                await singUpWithGoogle();\n        };\n\n        const toggleVisible = () => {\n                setIsVisible((prev) => !prev);\n        };\n\n        const toggleVisible2 = () => {\n                setIsVisible2((prev) => !prev);\n        };\n\n        //  === Error Styling ===\n        const errorEmail = errors?.email && {\n                marginBottom: '0',\n                border: '1px solid var(--error-500)',\n        };\n\n        const errorPasword = errors?.password && {\n                marginBottom: '0',\n                border: '1px solid var(--error-500)',\n        };\n\n        const errorPasswrodRepeat = errors?.passwrodRepeat && {\n                marginBottom: '0',\n                border: '1px solid var(--error-500)',\n        };\n\n        return (\n                <Wrapper\n                        as={motion.section}\n                        initial=\"hidden\"\n                        animate=\"enter\"\n                        exit=\"exit\"\n                        variants={pageTransitionSingle}\n                >\n                        <Container>\n                                {isLoading ? (\n                                        <SpinnerXl />\n                                ) : (\n                                        <SignUpBlock>\n                                                <LoginText>\n                                                        <h1>👋</h1>\n                                                        <HeadingSmSbBase>Create an account</HeadingSmSbBase>\n                                                        <SubHeadTextMdNorm style={{ margin: '1rem 0 3rem 0' }}>\n                                                                Start your 30-day free trial.\n                                                        </SubHeadTextMdNorm>\n                                                </LoginText>\n\n                                                <SignUpForm onSubmit={handleSubmit(onSubmit)}>\n                                                        <ErrorBlock>\n                                                                {errors?.userName && (\n                                                                        <TextErrorSm>\n                                                                                {errors?.userName?.message ||\n                                                                                        'Hm... something went wrong'}\n                                                                        </TextErrorSm>\n                                                                )}\n                                                        </ErrorBlock>\n\n                                                        {/* EMAIL */}\n                                                        <label htmlFor=\"email\">E-mail</label>\n                                                        <InputBlock style={errorEmail}>\n                                                                <input\n                                                                        placeholder=\"Enter your e-mail\"\n                                                                        {...register('email', {\n                                                                                required: 'User name is required',\n                                                                                pattern: {\n                                                                                        value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                                                                                        message: 'Invalid email address',\n                                                                                },\n                                                                        })}\n                                                                />\n                                                        </InputBlock>\n                                                        {/* ERROR MESSAGE */}\n                                                        <ErrorBlock>\n                                                                {errors?.email && (\n                                                                        <TextErrorSm>\n                                                                                {errors?.email?.message ||\n                                                                                        'Hm... something went wrong'}\n                                                                        </TextErrorSm>\n                                                                )}\n                                                        </ErrorBlock>\n\n                                                        {/* PASSWORD */}\n                                                        <label htmlFor=\"password\">Password</label>\n                                                        <InputBlock style={errorPasword}>\n                                                                <input\n                                                                        type={isVisible ? 'text' : 'password'}\n                                                                        autoComplete=\"on\"\n                                                                        placeholder=\"••••••••\"\n                                                                        {...register('password', {\n                                                                                required: 'Password is required',\n                                                                                pattern: {\n                                                                                        value: /^(?=.{10,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?\\W).*$/,\n                                                                                        message: 'A password containing at least 1 uppercase, 1 lowercase, 1 digit, 1 special character and have a length of at least of 10',\n                                                                                },\n                                                                        })}\n                                                                />\n\n                                                                <i>\n                                                                        {isVisible ? (\n                                                                                <FiEyeOff onClick={toggleVisible} />\n                                                                        ) : (\n                                                                                <FiEye onClick={toggleVisible} />\n                                                                        )}\n                                                                </i>\n                                                        </InputBlock>\n\n                                                        {/* ERROR MESSAGE */}\n                                                        <ErrorBlock>\n                                                                {errors?.password && (\n                                                                        <TextErrorSm>\n                                                                                {errors?.password?.message ||\n                                                                                        'Hm... something went wrong'}\n                                                                        </TextErrorSm>\n                                                                )}\n                                                        </ErrorBlock>\n\n                                                        {/* REPEAT-PASSWORD */}\n                                                        <label htmlFor=\"passwrodRepeat\">Repeat Password</label>\n                                                        <InputBlock style={errorPasswrodRepeat}>\n                                                                <input\n                                                                        type={isVisible2 ? 'text' : 'password'}\n                                                                        autoComplete=\"on\"\n                                                                        placeholder=\"••••••••\"\n                                                                        {...register('passwrodRepeat', {\n                                                                                required: 'Password is required',\n                                                                                pattern: {\n                                                                                        value: /^(?=.{10,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?\\W).*$/,\n                                                                                        message: 'A password containing at least 1 uppercase, 1 lowercase, 1 digit, 1 special character and have a length of at least of 10',\n                                                                                },\n\n                                                                                validate: (value) =>\n                                                                                        value ===\n                                                                                                inputPassword.current ||\n                                                                                        'The passwords do not match',\n                                                                        })}\n                                                                />\n\n                                                                <i>\n                                                                        {isVisible2 ? (\n                                                                                <FiEyeOff onClick={toggleVisible2} />\n                                                                        ) : (\n                                                                                <FiEye onClick={toggleVisible2} />\n                                                                        )}\n                                                                </i>\n                                                        </InputBlock>\n\n                                                        {/* ERROR MESSAGE */}\n                                                        <ErrorBlock>\n                                                                {errors?.passwrodRepeat && (\n                                                                        <TextErrorSm>\n                                                                                {errors?.passwrodRepeat?.message ||\n                                                                                        'Hm... something went wrong'}\n                                                                        </TextErrorSm>\n                                                                )}\n                                                        </ErrorBlock>\n\n                                                        {/* BUTTONS */}\n                                                        <LoginBtn type=\"submit\">Sign Up</LoginBtn>\n\n                                                        {/* SIGN UP WITH GOOGLE OPEN POPUP */}\n                                                        <LoginIcon type=\"button\" onClick={signUpWithGoogle}>\n                                                                <img src={googleIcon} alt=\"google-icon\" /> Sign up with\n                                                                Google\n                                                        </LoginIcon>\n\n                                                        <TextSeparator>\n                                                                <TextNormalSm>Have an account?</TextNormalSm>\n\n                                                                <LinkSmMd to=\"/login\">Log In</LinkSmMd>\n                                                        </TextSeparator>\n                                                </SignUpForm>\n                                        </SignUpBlock>\n                                )}\n                        </Container>\n                </Wrapper>\n        );\n};\n\nexport default SignUp;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n        margin: 2rem auto;\n        height: 100vh;\n        overflow: scroll;\n`;\n\nexport const SignUpForm = styled.form`\n        display: flex;\n        justify-content: center;\n        align-items: flex-start;\n        flex-flow: column nowrap;\n        label {\n                color: ${({ theme }) => theme.fontColorBase};\n                display: block;\n                font-size: var(--text-sm);\n                line-height: var(--text-lh-sm);\n                font-family: var(--ff);\n                font-weight: var(--fw-medium);\n        }\n`;\n\nexport const SignUpBlock = styled.section`\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-flow: column nowrap;\n`;\n\nexport const InputBlock = styled.div`\n        margin: 0 auto;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-flow: row nowrap;\n        color: var(--gray-500);\n        font-size: var(--text-md);\n        line-height: var(--text-lh-md);\n        font-family: var(--ff);\n        font-weight: var(--fw-normal);\n        margin-top: 0.375rem;\n        margin-bottom: 1.5rem;\n        background-color: var(--white);\n        width: 100%;\n        max-width: 343px;\n        min-height: 44px;\n        height: 100%;\n\n        padding: 0.6rem 0.8rem;\n        border: 1px var(--gray-300) solid;\n        border-radius: var(--radii);\n        box-shadow: var(--shadow-xs);\n\n        input {\n                max-width: 343px;\n                width: 100%;\n                background-color: transparent;\n                border: hidden;\n                outline: none;\n        }\n\n        input::placeholder {\n                color: var(--gray-500);\n                font-size: var(--text-md);\n                line-height: var(--text-lh-md);\n                font-family: var(--ff);\n                font-weight: var(--fw-normal);\n        }\n\n        i {\n                cursor: pointer;\n                color: var(--gray-500);\n\n                &:hover {\n                        color: var(--gray-700);\n                }\n        }\n`;\n\nexport const ErrorBlock = styled.div`\n        margin: 0 auto;\n        max-width: 343px;\n        text-align: center;\n`;\n\nexport const TextSeparator = styled.div`\n        margin: 0 auto;\n        display: flex;\n        flex-flow: row wrap;\n        justify-content: space-between;\n        align-items: center !important;\n        gap: 0.5rem;\n`;\n"],"names":["TrialWrapper","styled","TrialFrame","theme","blockElement","TextFrame","ButtonsFrame","BtnActive","BtnPrimary","BtnMore","BtnTerGrey","btn","secondary","Wrapper","IconList","BtnMain","BtnWrapper","LoginText","LoginBtn","fontColorBase","LoginIcon","useToggle","isVisible","setIsVisible","isVisible2","setIsVisible2","useAuth","singup","isLoading","error","singUpWithGoogle","currentUser","navigate","useNavigate","inputPassword","useRef","useForm","mode","register","errors","formState","handleSubmit","watch","reset","current","onSubmit","data","email","password","useEffect","signUpWithGoogle","toggleVisible","prev","toggleVisible2","errorEmail","marginBottom","border","errorPasword","errorPasswrodRepeat","passwrodRepeat","as","motion","initial","animate","exit","variants","pageTransitionSingle","style","margin","userName","message","htmlFor","placeholder","required","pattern","value","type","autoComplete","onClick","validate","src","googleIcon","alt","Te","to","SignUpForm","SignUpBlock","InputBlock","ErrorBlock","TextSeparator"],"sourceRoot":""}